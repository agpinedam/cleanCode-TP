/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.mines.address.api.controller;

import org.mines.address.api.model.BirthCertificate;
import org.mines.address.api.model.DeletePerson200Response;
import org.mines.address.api.model.Error;
import org.mines.address.api.model.Person;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-03T10:03:17.438581522+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "birthCertificate", description = "the birthCertificate API")
public interface PersonApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /person/{id}/birthCertificate : Create a birth certificate
     *
     * @param id The person ID (required)
     * @param birthCertificate  (required)
     * @return Created birth certificate (status code 201)
     *         or Invalid request body (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createBirthCertificate",
        summary = "Create a birth certificate",
        tags = { "birthCertificate" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created birth certificate", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BirthCertificate.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/person/{id}/birthCertificate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BirthCertificate> createBirthCertificate(
        @Parameter(name = "id", description = "The person ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BirthCertificate", description = "", required = true) @Valid @RequestBody BirthCertificate birthCertificate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"birthPlace\" : \"birthPlace\", \"personId\" : \"personId\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /person : Create a person record
     *
     * @param person  (required)
     * @return Created person record (status code 201)
     *         or Invalid request body (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createPerson",
        summary = "Create a person record",
        tags = { "person" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created person record", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Person.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/person",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Person> createPerson(
        @Parameter(name = "Person", description = "", required = true) @Valid @RequestBody Person person
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"id\", \"birthDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /person/{id} : Delete a person record
     *
     * @param id The ID of the person (required)
     * @return Person record deleted (status code 200)
     *         or Person not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deletePerson",
        summary = "Delete a person record",
        tags = { "person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Person record deleted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeletePerson200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Person not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/person/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeletePerson200Response> deletePerson(
        @Parameter(name = "id", description = "The ID of the person", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Person deleted successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /person/{id}/birthCertificate : Retrieve birth certificate of a person
     *
     * @param id The person ID (required)
     * @return Birth certificate details (status code 200)
     *         or Birth certificate not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getBirthCertificate",
        summary = "Retrieve birth certificate of a person",
        tags = { "birthCertificate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Birth certificate details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BirthCertificate.class))
            }),
            @ApiResponse(responseCode = "404", description = "Birth certificate not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/person/{id}/birthCertificate",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BirthCertificate> getBirthCertificate(
        @Parameter(name = "id", description = "The person ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"birthPlace\" : \"birthPlace\", \"personId\" : \"personId\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /person/{id} : Get details of a specific person
     *
     * @param id The ID of the person (required)
     * @return Details of the requested person (status code 200)
     *         or Person not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getPerson",
        summary = "Get details of a specific person",
        tags = { "person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Details of the requested person", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Person.class))
            }),
            @ApiResponse(responseCode = "404", description = "Person not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/person/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Person> getPerson(
        @Parameter(name = "id", description = "The ID of the person", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"id\", \"birthDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /person : List all persons
     *
     * @return An array of persons (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "listPersons",
        summary = "List all persons",
        tags = { "person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An array of persons", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/person",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Person>> listPersons(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"id\", \"birthDate\" : \"2000-01-23\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"id\", \"birthDate\" : \"2000-01-23\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
